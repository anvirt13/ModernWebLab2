{"ast":null,"code":"const fs = require('fs');\nconst path = require('path');\nconst http = require('http');\nconst {\n  readFile\n} = require('fs/promises');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nlet users = [{\n  id: 1,\n  name: 'Anvir'\n}, {\n  id: 2,\n  name: 'Krystal'\n}, {\n  id: 3,\n  name: 'Nicole'\n}];\n\n//Read a file using node fs\nfs.readFile(path.join(__dirname, 'file.txt'), 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(\"\\nFile 1 Contents:\");\n  console.log(data);\n});\n\n//Writing in a file using node fs\nconst filePath = \"fileTwo.txt\";\nconst contentToWrite = \"Goodbye World!\";\nfs.writeFile(filePath, contentToWrite, err => {\n  if (err) {\n    console.error(\"Error writing into the file:\", err);\n  } else {\n    console.log(\"\\nContent has been added to file 2!\");\n    console.log(\"\\nUpdated Content in File 2:\");\n    console.log(contentToWrite); // displays the updated content in file 2\n  }\n});\n\n// Create a server using HTTP Module, displays a page on http://localhost:3000/ that says \"Welcome to my website\"\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {\n    'Content-Type': 'text/html'\n  });\n  res.write(\"Welcome to my Website\");\n  res.end();\n}).listen(3000);\n\n// REST APIs, \n\n// Creating a new user\nfunction generateUserId() {\n  const maxId = Math.max(...users.map(user => user.id));\n  return maxId + 1;\n}\n\n// Function to create a new user\nfunction createUser(name) {\n  try {\n    const newUser = {\n      id: generateUserId(),\n      name\n    };\n    users.push(newUser);\n    return newUser;\n  } catch (error) {\n    console.error('Error creating a user:', error);\n    return null;\n  }\n}\n\n//How to create a new user\nconst newUserName = 'Britanny';\nconst createdUser = createUser(newUserName);\nif (createdUser) {\n  console.log(`User ${createdUser.name} with ID ${createdUser.id} has been created.`);\n} else {\n  console.log('User creation failed.');\n}\n\n// Delete a user by ID:\nfunction deleteUserById(userId) {\n  try {\n    // Find the index of the user with the given ID\n    const userIndex = users.findIndex(user => user.id === userId);\n    if (userIndex === -1) {\n      // There would be no users with this ID\n      return false;\n    }\n\n    // Removing a user from the array\n    users.splice(userIndex, 1);\n    return true;\n  } catch (error) {\n    console.error('Error deleting a user:', error);\n    return false;\n  }\n}\n\n// Deleting a user by ID\nconst userIdToDelete = 2;\nconst deleted = deleteUserById(userIdToDelete);\nif (deleted) {\n  console.log(`User with ID ${userIdToDelete} has been deleted.`);\n} else {\n  console.log(`User with ID ${userIdToDelete} was not found or deletion failed.`);\n}\n\n// Shows the updated list of users\nconsole.log('Updated user list:');\nfor (const user of users) {\n  console.log(`User ID: ${user.id}, Name: ${user.name}`);\n}","map":{"version":3,"names":["fs","require","path","http","readFile","express","bodyParser","users","id","name","join","__dirname","err","data","console","log","filePath","contentToWrite","writeFile","error","createServer","req","res","writeHead","write","end","listen","generateUserId","maxId","Math","max","map","user","createUser","newUser","push","newUserName","createdUser","deleteUserById","userId","userIndex","findIndex","splice","userIdToDelete","deleted"],"sources":["/Users/anvir/Documents/Semester 3/Modern Web/miniprojects/src/fileOperations.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst http = require('http');\nconst { readFile } = require('fs/promises');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n\n\nlet users = [\n    { id: 1, name: 'Anvir' },\n    { id: 2, name: 'Krystal' },\n    { id: 3, name: 'Nicole' },\n  ];\n  \n  //Read a file using node fs\n  fs.readFile(path.join(__dirname, 'file.txt'), 'utf8', (err, data) => {\n    if (err) throw err;\n    console.log(\"\\nFile 1 Contents:\");\n    console.log(data);\n  });\n\n  //Writing in a file using node fs\n  const filePath = \"fileTwo.txt\"\n  const contentToWrite = \"Goodbye World!\"\n\n  fs.writeFile(filePath, contentToWrite,(err) =>{\n    if (err){\n      console.error(\"Error writing into the file:\", err);\n    }else{\n      console.log(\"\\nContent has been added to file 2!\");\n      console.log(\"\\nUpdated Content in File 2:\")\n      console.log(contentToWrite); // displays the updated content in file 2\n    }\n  } )\n\n  // Create a server using HTTP Module, displays a page on http://localhost:3000/ that says \"Welcome to my website\"\n  http.createServer(function (req, res) {\n    res.writeHead(200, {'Content-Type': 'text/html'});\n    res.write(\"Welcome to my Website\")\n    res.end();\n  }).listen(3000);\n  \n  // REST APIs, \n\n\n  \n\n  // Creating a new user\n  function generateUserId() {\n    const maxId = Math.max(...users.map((user) => user.id));\n    return maxId + 1;\n  }\n  \n  // Function to create a new user\n  function createUser(name) {\n    try {\n      const newUser = {\n        id: generateUserId(),\n        name,\n      };\n      users.push(newUser);\n      return newUser;\n    } catch (error) {\n      console.error('Error creating a user:', error);\n      return null;\n    }\n  }\n  \n  //How to create a new user\n  const newUserName = 'Britanny';\n  const createdUser = createUser(newUserName);\n  \n  if (createdUser) {\n    console.log(`User ${createdUser.name} with ID ${createdUser.id} has been created.`);\n  } else {\n    console.log('User creation failed.');\n  }\n  \n  // Delete a user by ID:\n  function deleteUserById(userId) {\n    try {\n      // Find the index of the user with the given ID\n      const userIndex = users.findIndex((user) => user.id === userId);\n  \n      if (userIndex === -1) {\n        // There would be no users with this ID\n        return false;\n      }\n  \n      // Removing a user from the array\n      users.splice(userIndex, 1);\n      return true;\n    } catch (error) {\n      console.error('Error deleting a user:', error);\n      return false;\n    }\n  }\n  \n  // Deleting a user by ID\n  const userIdToDelete = 2;\n  const deleted = deleteUserById(userIdToDelete);\n  \n  if (deleted) {\n    console.log(`User with ID ${userIdToDelete} has been deleted.`);\n  } else {\n    console.log(`User with ID ${userIdToDelete} was not found or deletion failed.`);\n  }\n  \n  // Shows the updated list of users\n  console.log('Updated user list:');\n  for (const user of users) {\n    console.log(`User ID: ${user.id}, Name: ${user.name}`);\n  }\n  \n  \n  \n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}