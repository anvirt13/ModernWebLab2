Backend/fileOperations.js:
const express = require('express');
const passport = require('passport');
const session = require('express-session');
const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcrypt');
const User = require('./models/User');
const cors = require('cors');
const { MongoClient } = require('mongodb');
const app = express();
const port = process.env.PORT || 3005;
const authRoutes = require('./routes/authRoutes');


app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const uri = "mongodb+srv://anvirtiwana13:NawlMia123@cluster0.kvtku1u.mongodb.net/";
const dbName = 'studentData';
const collectionName = 'students';
app.use(express.urlencoded({ extended: true }));


// Use the authRoutes
app.use('/auth', authRoutes); 

// Express session middleware
app.use(session({
    secret: 'secret-key', // Change this to a more secure secret
    resave: false,
    saveUninitialized: false,
  }));

// Passport initialization and session setup
app.use(passport.initialize());
app.use(passport.session());

// Passport local strategy setup
passport.use(new LocalStrategy(
    async (username, password, done) => {
      try {
        const user = await User.findOne({ username });
  
        if (!user) {
          return done(null, false, { message: 'Incorrect username.' });
        }
  
        const passwordMatch = await bcrypt.compare(password, user.password);
  
        if (!passwordMatch) {
          return done(null, false, { message: 'Incorrect password.' });
        }
  
        return done(null, user);
      } catch (error) {
        return done(error);
      }
    }
  ));
  
// Serialize and deserialize user (to store in session)
passport.serializeUser((user, done) => {
    done(null, user.id);
  });
  
  passport.deserializeUser(async (id, done) => {
    try {
      const user = await User.findById(id);
      done(null, user);
    } catch (error) {
      done(error);
    }
  });

// Registration Route
app.use('/auth', authRoutes); 

// Login Route
app.post('/login', passport.authenticate('local'), (req, res) => {
    // If authentication succeeds, this function will be called.
    // Handle the successful login response here.
    res.json({ message: 'Login successful', user: req.user });
});

// Logout Route
app.get('/logout', (req, res) => {
    req.logout(); // Provided by Passport.js to terminate a login session
    res.json({ message: 'Logout successful' });
});

let collection; // Declaring the collection variable in the outer scope


(async function () {
  try {
      const client = await MongoClient.connect(uri, { useUnifiedTopology: true });
      console.log('Connected to MongoDB.');

      const db = client.db(dbName);
      collection = db.collection(collectionName); // Assign the collection here

  } catch (err) {
      console.error('Error occurred while connecting to MongoDB:', err);
  }
})();


// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ error: 'Something broke!' });
});

// Importing route files
const courseRoutes = require('./routes/courseRoutes');
const gradeRoutes = require('./routes/gradeRoutes');
const studentRoutes = require('./routes/studentRoutes');

// Use route files
app.use('/api', courseRoutes);
app.use('/api', gradeRoutes);
app.use('/api', studentRoutes);


// Main page with buttons
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>Student Data Page</title>
        </head>
        <body>
          <h1> Student API </h1>
          <button onclick="redirectToLogin()"> Login </button>
          <button onclick="redirectToRegister()"> Register </button>
          <button onclick="redirectToApiStudents()">Fetch Student Data as JSON</button>
          <button onclick="redirectToStudentsPage()">Add Student</button>
          <pre id="jsonResult"></pre>
          <script>
            function redirectToApiStudents() {
              window.location.href = '/v1/api/students';
            }
            function redirectToStudentsPage() {
              window.location.href = '/addStudent';
            }
            function redirectToLogin(){
              window.location.href = '/auth/login';
            }
            function redirectToRegister() {
              window.location.href = '/auth/register';
            }
          </script>
        </body>
        </html>
    `);
});

// Add Student Page
app.get('/addStudent', (req, res) => {
  res.send(`
      <!DOCTYPE html>
      <html>
      <head>
          <title>Add Student</title>
      </head>
      <body>
          <h1>Add Student</h1>
          <form action="/addStudent" method="post">
              <label for="name">Name:</label>
              <input type="text" name="name" id="name" required><br><br>
              <label for="grade">Grade:</label>
              <input type="text" name="grade" id="grade" required><br><br>
              <label for="course">Course:</label>
              <input type="text" name="course" id="course" required><br><br>
              <input type="submit" value="Add Student">
              <button type="button" onclick="redirectToMainPage()">Back</button>
          </form>
          <script>
              function redirectToMainPage() {
                  window.location.href = '/';
              }
          </script>
      </body>
      </html>
  `);
});

// Handle Add Student Form Submission
app.post('/addStudent', async (req, res) => {
  const { name, grade, course } = req.body;
  if (name && grade && course) {
      const newStudent = { name, grade, course };

      // Add the student to MongoDB
      const collection = db.collection('students');
      await collection.insertOne(newStudent);

      res.redirect('/addStudent');
  } else {
      res.send('Name, grade, and course are required.');
  }
});

// API Version 1
const v1Router = express.Router();

// API endpoint for students
v1Router.get('/api/students', async (req, res) => {
  try {
      const allStudents = await collection.find().toArray();

        // Sort students by name and grade
        const sortedStudents = allStudents.sort((a, b) => {
            // Sort by name first
            const nameA = a.name.toLowerCase();
            const nameB = b.name.toLowerCase();
            if (nameA < nameB) return -1;
            if (nameA > nameB) return 1;

            // If names are equal, sort by grade
            if (a.grade < b.grade) return -1;
            if (a.grade > b.grade) return 1;
            return 0;
        });

        res.json(sortedStudents);
    } catch (err) {
        res.status(500).json({ error: 'Failed to retrieve students from the database.' });
    }
});



// Add a new student to the database
// The '/api/students' POST endpoint to add a new student
v1Router.post('/api/students', async (req, res) => {
  const { name, grade } = req.body;
  if (name && grade) {
      const newStudent = { name, grade };
      await collection.insertOne(newStudent);
      res.json({ message: 'Student added successfully', student: newStudent });
  } else {
      res.status(400).json({ error:  'Name, grade and course are required.' });
  }
});


app.use('/v1', v1Router);

const server = app.listen(port, () => {
    const serverAddress = server.address();
    const link = `http://localhost:${serverAddress.port}`;
    console.log(`Server is running at ${link}`);
  });

Backend/models/Course.js:
const mongoose = require('mongoose');

const { Schema } = mongoose;

const courseSchema = new Schema({
  courseName: {
    type: String,
    required: true,
  },
  instructor: {
    type: String,
    required: true,
  },
  description: {
    type: String,
    default: '',
  },
});

const Course = mongoose.model('Course', courseSchema);

module.exports = Course;

Backend/models/Grade.js:
const mongoose = require('mongoose');

const { Schema } = mongoose;

const gradeSchema = new Schema({
  gradeLetter: {
    type: String,
    required: true,
    enum: ['A', 'B', 'C', 'D', 'F'],
  },
});

const Grade = mongoose.model('Grade', gradeSchema);

module.exports = Grade;

Backend/models/Student.js:
const mongoose = require('mongoose');

const { Schema } = mongoose;

const studentSchema = new Schema({
  name: {
    type: String,
    required: true,
  },
  grade: {
    type: String,
    required: true,
    enum: ['A', 'B', 'C', 'D', 'F'],
  },
});

const Student = mongoose.model('Student', studentSchema);

module.exports = Student;

Backend/models/User.js:
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

// Connect to MongoDB with the appropriate connection string including the database name
mongoose.connect('mongodb+srv://anvirtiwana13:NawlMia123@cluster0.kvtku1u.mongodb.net/users', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).catch((err) => {
  console.error('Error occurred while connecting to MongoDB:', err);
});

// Define the user schema
const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
    trim: true,
  },
  password: {
    type: String,
    required: true,
    trim: true,
  },
});

// Hash the password before saving
userSchema.pre('save', async function (next) {
  const user = this;
  if (user.isModified('password')) {
    user.password = await bcrypt.hash(user.password, 10);
  }
  next();
});

// Create the User model using the userSchema and specify the collection name
const User = mongoose.model('User', userSchema, 'users');

module.exports = User;

Backend/routes/authRoutes.js:
const express = require('express');
const passport = require('passport');
const bcrypt = require('bcrypt');
const session = require('express-session');
const User = require('../models/User');
const auth = express.Router(); // Changed the router variable name to auth
const flash = require('connect-flash');
auth.use(flash());

// Session middleware setup
auth.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: true } // Use 'secure: true' in production with HTTPS
  })
);

// Initialize Passport
auth.use(passport.initialize());
auth.use(passport.session());
auth.get('/login', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>User Login</title>
    </head>
    <body>
      <h1>User Login</h1>
      <form action="/auth/login" method="post"> <!-- Updated action to /auth/login -->
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <input type="submit" value="Login">
      </form>
    </body>
    </html>
  `);
});
// Route for rendering user registration form
auth.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>User Registration</title>
    </head>
    <body>
      <h1>User Registration</h1>
      <form action="/auth/register" method="post"> <!-- Updated action to /auth/register -->
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <input type="submit" value="Register">
      </form>
    </body>
    </html>
  `);
});

// Route for user registration
auth.post('/register', async (req, res)  => {
  try {
    const { username, password } = req.body;

    // Check if the username already exists
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: 'Username already exists' });
    }

    // Create a new user instance with provided username and password
    const newUser = new User({ username, password });

    // Save the new user to the database
    await newUser.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Registration failed' });
  }
});

// Route for user login
auth.post('/login', passport.authenticate('local', {
  successRedirect: '/', // Redirect on successful login
  failureRedirect: '/login', // Redirect on failed login
  failureFlash: true // Enable flash messages for failures
}));

// Route for user logout
auth.post('/auth/logout', (req, res) => {
  req.logout(); // Passport method to log out
  req.session.destroy((err) => {
    if (err) {
      res.status(500).json({ message: 'Logout failed' });
    } else {
      res.status(200).json({ message: 'Logout successful' });
    }
  });
});

module.exports = auth;

Backend/routes/courseRoutes.js:
const express = require('express');
const passport = require('passport');
const bcrypt = require('bcrypt');
const session = require('express-session');
const User = require('../models/User');
const auth = express.Router(); // Changed the router variable name to auth
const flash = require('connect-flash');
auth.use(flash());

// Session middleware setup
auth.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: true } // Use 'secure: true' in production with HTTPS
  })
);

// Initialize Passport
auth.use(passport.initialize());
auth.use(passport.session());
auth.get('/login', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>User Login</title>
    </head>
    <body>
      <h1>User Login</h1>
      <form action="/auth/login" method="post"> <!-- Updated action to /auth/login -->
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <input type="submit" value="Login">
      </form>
    </body>
    </html>
  `);
});
// Route for rendering user registration form
auth.get('/register', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>User Registration</title>
    </head>
    <body>
      <h1>User Registration</h1>
      <form action="/auth/register" method="post"> <!-- Updated action to /auth/register -->
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>
        <input type="submit" value="Register">
      </form>
    </body>
    </html>
  `);
});

// Route for user registration
auth.post('/register', async (req, res)  => {
  try {
    const { username, password } = req.body;

    // Check if the username already exists
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: 'Username already exists' });
    }

    // Create a new user instance with provided username and password
    const newUser = new User({ username, password });

    // Save the new user to the database
    await newUser.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Registration failed' });
  }
});

// Route for user login
auth.post('/login', passport.authenticate('local', {
  successRedirect: '/', // Redirect on successful login
  failureRedirect: '/login', // Redirect on failed login
  failureFlash: true // Enable flash messages for failures
}));

// Route for user logout
auth.post('/auth/logout', (req, res) => {
  req.logout(); // Passport method to log out
  req.session.destroy((err) => {
    if (err) {
      res.status(500).json({ message: 'Logout failed' });
    } else {
      res.status(200).json({ message: 'Logout successful' });
    }
  });
});

module.exports = auth;

Backend/routes/courseRoutes.js:
const express = require('express');
const router = express.Router();
const Course = require('../models/Course'); // Import the Course model

// Create a new course
router.post('/courses', async (req, res) => {
  try {
    const { courseName, instructor, description } = req.body;
    const newCourse = new Course({ courseName, instructor, description });
    await newCourse.save();
    res.status(201).json(newCourse);
  } catch (err) {
    res.status(500).json({ error: 'Could not create the course' });
  }
});

// Get all courses
router.get('/courses', async (req, res) => {
  try {
    const courses = await Course.find();
    res.json(courses);
  } catch (err) {
    res.status(500).json({ error: 'Could not retrieve courses' });
  }
});

// Get a specific course by ID
router.get('/courses/:id', async (req, res) => {
  try {
    const course = await Course.findById(req.params.id);
    if (!course) {
      return res.status(404).json({ error: 'Course not found' });
    }
    res.json(course);
  } catch (err) {
    res.status(500).json({ error: 'Could not retrieve the course' });
  }
});

// Update a course by ID
router.put('/courses/:id', async (req, res) => {
  try {
    const { courseName, instructor, description } = req.body;
    const updatedCourse = await Course.findByIdAndUpdate(req.params.id, { courseName, instructor, description }, { new: true });
    if (!updatedCourse) {
      return res.status(404).json({ error: 'Course not found' });
    }
    res.json(updatedCourse);
  } catch (err) {
    res.status(500).json({ error: 'Could not update the course' });
  }
});

// Delete a course by ID
router.delete('/courses/:id', async (req, res) => {
  try {
    const deletedCourse = await Course.findByIdAndDelete(req.params.id);
    if (!deletedCourse) {
      return res.status(404).json({ error: 'Course not found' });
    }
    res.json({ message: 'Course deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: 'Could not delete the course' });
  }
});

module.exports = router;

Backend/routes/gradeRoutes.js:
const express = require('express');
const router = express.Router();
const Grade = require('../models/Grade'); // Import the Grade model

// Create a new grade
router.post('/grades', async (req, res) => {
  try {
    const { gradeLetter } = req.body;
    const newGrade = new Grade({ gradeLetter });
    await newGrade.save();
    res.status(201).json(newGrade);
  } catch (err) {
    res.status(500).json({ error: 'Could not create the grade' });
  }
});

// Get all grades
router.get('/grades', async (req, res) => {
  try {
    const grades = await Grade.find();
    res.json(grades);
  } catch (err) {
    res.status(500).json({ error: 'Could not retrieve grades' });
  }
});

// Get a specific grade by ID
router.get('/grades/:id', async (req, res) => {
  try {
    const grade = await Grade.findById(req.params.id);
    if (!grade) {
      return res.status(404).json({ error: 'Grade not found' });
    }
    res.json(grade);
  } catch (err) {
    res.status(500).json({ error: 'Could not retrieve the grade' });
  }
});

// Update a grade by ID
router.put('/grades/:id', async (req, res) => {
  try {
    const { gradeLetter } = req.body;
    const updatedGrade = await Grade.findByIdAndUpdate(req.params.id, { gradeLetter }, { new: true });
    if (!updatedGrade) {
      return res.status(404).json({ error: 'Grade not found' });
    }
    res.json(updatedGrade);
  } catch (err) {
    res.status(500).json({ error: 'Could not update the grade' });
  }
});

// Delete a grade by ID
router.delete('/grades/:id', async (req, res) => {
  try {
    const deletedGrade = await Grade.findByIdAndDelete(req.params.id);
    if (!deletedGrade) {
      return res.status(404).json({ error: 'Grade not found' });
    }
    res.json({ message: 'Grade deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: 'Could not delete the grade' });
  }
});

module.exports = router;

Backend/routes/studentRoutes.js:
const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');
const Student = require('../models/Student');

// Create a new student with validation
router.post(
  '/students',
  [
    body('name').notEmpty().isString(),
    body('grade').notEmpty().isIn(['A', 'B', 'C', 'D', 'F']),
    // Add other validations for properties as needed
  ],
  async (req, res) => {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(422).json({ errors: errors.array() });
    }

    // If validation succeeds, continue with creating a new student
    try {
      const { name, grade } = req.body;
      const newStudent = new Student({ name, grade });
      await newStudent.save();
      res.status(201).json(newStudent);
    } catch (err) {
      res.status(500).json({ error: 'Could not create the student' });
    }
  }
);

// Get all students
router.get('/students', async (req, res) => {
  try {
    const students = await Student.find();
    res.json(students);
  } catch (err) {
    res.status(500).json({ error: 'Could not retrieve students' });
  }
});

// Get a specific student by ID
router.get('/students/:id', async (req, res) => {
  try {
    const student = await Student.findById(req.params.id);
    if (!student) {
      return res.status(404).json({ error: 'Student not found' });
    }
    res.json(student);
  } catch (err) {
    res.status(500).json({ error: 'Could not retrieve the student' });
  }
});

// Update a student by ID
router.put(
  '/students/:id',
  [
    body('name').optional().notEmpty().isString(),
    body('grade').optional().notEmpty().isIn(['A', 'B', 'C', 'D', 'F']),
    // Add other validations for properties as needed
  ],
  async (req, res) => {
    // Check for validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(422).json({ errors: errors.array() });
    }

    try {
      const updatedStudent = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true });
      if (!updatedStudent) {
        return res.status(404).json({ error: 'Student not found' });
      }
      res.json(updatedStudent);
    } catch (err) {
      res.status(500).json({ error: 'Could not update the student' });
    }
  }
);

// Delete a student by ID
router.delete('/students/:id', async (req, res) => {
  try {
    const deletedStudent = await Student.findByIdAndDelete(req.params.id);
    if (!deletedStudent) {
      return res.status(404).json({ error: 'Student not found' });
    }
    res.json({ message: 'Student deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: 'Could not delete the student' });
  }
});

module.exports = router;